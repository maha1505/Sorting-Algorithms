Definition: 
Bubble Sort is a comparison-based sorting algorithm where adjacent elements are compared and swapped if they are in the wrong order. 
This process continues until the entire list is sorted.

Steps:
1. Start from the beginning of the array.
2. Compare the current element with the next one.
3. Swap them if they are in the wrong order.
4. Repeat this for all elements. After each full pass, the largest unsorted element moves to its correct position at the end.
5. Repeat the process for the remaining unsorted part of the array.

Example:
Input: [5, 1, 4, 2, 8]
Pass 1: [1, 4, 2, 5, 8]
Pass 2: [1, 2, 4, 5, 8]
Pass 3: [1, 2, 4, 5, 8] (No swaps → sorting complete)

Time Complexity:
Best Case: O(n) (when already sorted and optimized with a swapped flag)
Average Case: O(n²)
Worst Case: O(n²)

Space Complexity:
O(1) – in-place sorting

Characteristics:
1. Easy to implement and understand
2. Stable sorting algorithm
3. Not efficient for large datasets

Code:

import java.util.*;
public class bubbleSort{
    public static void main(String[] args){
        Scanner in=new Scanner(System.in);
        int n=in.nextInt();
        boolean swapped=false;
        int[] arr=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=in.nextInt();
        }
        for(int i=0;i<4;i++){
            for(int j=0;j<4;j++){
                if(arr[j]>arr[j+1])
                {
                    int temp=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=temp;
                    swapped=true;
                }
            }
            if(!swapped)
            break;
        }
        System.out.println(Arrays.toString(arr));
        in.close();
    }
}

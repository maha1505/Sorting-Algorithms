Definition:
Insertion Sort builds a sorted array one element at a time by inserting each element into its correct position.

Steps:
1. Start from the second element (index 1).
2. Compare it with elements in the sorted part of the array (left side).
3. Shift larger elements one position to the right.
4. Insert the current element in its correct position.
5. Repeat until the array is sorted.

Time Complexity:
Best Case: O(n)
Average Case: O(n²)
Worst Case: O(n²)

Space Complexity:
O(1) – In-place sorting

Characteristics:
1. Simple and easy to implement
2. Stable sorting algorithm
3. Adaptive (performs well on nearly sorted data)
4. Efficient for small arrays

Code:

import java.util.*;
public class insertionSort {
    public static void main(String[] args) {
        Scanner in=new Scanner(System.in);
        int n=in.nextInt();
        int[] arr=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=in.nextInt();
        }
        for(int i=1;i<n;i++){
            int key=arr[i];
            int j=i-1;
            while(j>=0 && arr[j]>key){
                arr[j+1]=arr[j];
                j--;
            }
            arr[j+1]=key;
        }
        System.out.println(Arrays.toString(arr));
        in.close();
    }
}

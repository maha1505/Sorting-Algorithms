Definition:
Selection Sort repeatedly finds the minimum element from the unsorted portion and places it at the beginning.

Steps:
1. Start from index 0.
2. Find the minimum element in the unsorted part.
3. Swap it with the current index.
4. Repeat until the array is sorted.

Time Complexity:
Best Case: O(n²)
Average Case: O(n²)
Worst Case: O(n²)

Space Complexity:
O(1) → In-place sorting

Characteristics:
1. Simple and easy to implement
2. Not stable by default
3. Better than Bubble in terms of swaps
4. Inefficient for large data sets

Code:

import java.util.*;
public class selectionSort {
    public static void main(String[] args) {
        Scanner in=new Scanner(System.in);
        int n=in.nextInt();
        int[] arr=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=in.nextInt();
        }
        for(int i=0;i<n;i++){
            int min=i;
            for(int j=i;j<n;j++){
                if(arr[j]<arr[min])
                min=j;
            }
            int temp=arr[min];
            arr[min]=arr[i];
            arr[i]=temp;            
        }
        System.out.println(Arrays.toString(arr));
        in.close();
    }
}
